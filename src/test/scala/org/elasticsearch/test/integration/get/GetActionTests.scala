package org.elasticsearch.test.integration.get

import scalastic.elasticsearch._

@org.junit.runner.RunWith(classOf[org.scalatest.junit.JUnitRunner]) 
class GetActionTests extends IndexerBasedTest {

  test("simpleGetTests") {
    var response = indexer.get(indexName, "type1", "1")
    response.isExists should equal (false)
    //logger.info("--> index doc 1")
    indexer.index(indexName, "type1", "1", """{"field1": "value1", "field2": "value2"}""")
    //logger.info("--> realtime get 1")
    response = indexer.get(indexName, "type1", "1")
    response.isExists should equal (true)
    response.getSourceAsMap.get("field1").toString should equal ("value1")
    response.getSourceAsMap.get("field2").toString should equal ("value2")

    //logger.info("--> realtime get 1 (no type)")
    response = indexer.get(indexName, null, "1")
    response.isExists should equal (true)
    response.getSourceAsMap.get("field1").toString should equal ("value1")
    response.getSourceAsMap.get("field2").toString should equal ("value2")
    //logger.info("--> non realtime get 1")
    response = indexer.get(indexName, "type1", "1", realtime = Some(false))
    response.isExists should equal (false)
    //logger.info("--> realtime fetch of field (requires fetching parsing source)")
    response = indexer.get(indexName, "type1", "1", fields = Seq("field1"))
    response.isExists should equal (true)
    response.getSource should be(null)
    response.getField("field1").getValues.get(0).toString should equal ("value1")
    response.getField("field2") should be(null)
    //logger.info("--> flush the index, so we load it from it")
    indexer.flush()
    //logger.info("--> realtime get 1 (loaded from index)")
    response = indexer.get(indexName, "type1", "1")
    response.isExists should equal (true)
    response.getSourceAsMap.get("field1").toString should equal ("value1")
    response.getSourceAsMap.get("field2").toString should equal ("value2")
    //logger.info("--> non realtime get 1 (loaded from index)")
    response = indexer.get(indexName, "type1", "1", realtime = Some(false))
    response.isExists should equal (true)
    response.getSourceAsMap.get("field1").toString should equal ("value1")
    response.getSourceAsMap.get("field2").toString should equal ("value2")
    //logger.info("--> realtime fetch of field (loaded from index)")
    response = indexer.get(indexName, "type1", "1", fields = Seq("field1"))
    response.isExists should equal (true)
    response.getSource should be(null)
    response.getField("field1").getValues.get(0).toString should equal ("value1")
    response.getField("field2") should be(null)
    //logger.info("--> update doc 1")
    indexer.index(indexName, "type1", "1", """{"field1": "value1_1", "field2": "value2_1"}""")
    //logger.info("--> realtime get 1")
    response = indexer.get(indexName, "type1", "1")
    response.isExists should equal (true)
    response.getSourceAsMap.get("field1").toString should equal ("value1_1")
    response.getSourceAsMap.get("field2").toString should equal ("value2_1")
    //logger.info("--> update doc 1 again")
    indexer.index(indexName, "type1", "1", """{"field1": "value1_2", "field2": "value2_2"}""")
    response = indexer.get(indexName, "type1", "1")
    response.isExists should equal (true)
    response.getSourceAsMap.get("field1").toString should equal ("value1_2")
    response.getSourceAsMap.get("field2").toString should equal ("value2_2")
    val deleteResponse = indexer.delete(indexName, "type1", "1")
    deleteResponse.isFound should equal (true)
    response = indexer.get(indexName, "type1", "1")
    response.isExists should equal (false)
  }

  test("simpleMultiGetTests") {
    var response = indexer.multiget(indexName, "type1", Seq("1"))
    response.getResponses.length should equal (1)
    response.getResponses()(0).getResponse.isExists should equal (false)
    for (i <- 0 until 10) indexer.index(indexName, "type1", i.toString, """{"field": "value%s"}""".format(i))
    response = indexer.multiget(indexName, "type1", Seq("1", "15", "3", "9", "11"))
    response.getResponses.length should equal (5)
    (response.getResponses map (_.getId)) should equal (Array("1", "15", "3", "9", "11"))
    (response.getResponses map (_.getResponse.isExists)) should equal (Array(true, false, true, true, false))
    response.getResponses()(0).getResponse.getSourceAsMap.get("field").toString should equal ("value1")

    response = indexer.multiget(indexName, "type1", ids = Seq("1", "3"), fields = Seq("field"))
    response.getResponses.length should equal (2)
    response.getResponses()(0).getResponse.getSource should be(null)
    response.getResponses()(0).getResponse.getField("field").getValues.get(0).toString should equal ("value1")
  }

  test("realtimeGetWithCompress") {
    indexer.putMapping(indexName, "type", """{"type": {"_source": {"compress": true}}}""")
    val sb = new StringBuilder()
    for (i <- 0 until 1000) sb.append(java.util.UUID.randomUUID().toString)
    val fieldValue = sb.toString()
    fieldValue.size should equal (36 * 1000)
    indexer.index(indexName, "type", "1", """{"field": "%s"}""".format(fieldValue))
    val getResponse = indexer.get(indexName, "type", "1")
    getResponse.isExists should equal (true)
    getResponse.getSourceAsMap.get("field").toString should equal (fieldValue)
  }
}
